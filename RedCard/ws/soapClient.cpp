/* soapClient.cpp
   Generated by gSOAP 2.8.15 from wpsoap.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.15 2013-06-29 19:57:44 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__calculateTradeFee(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__calculateTradeFee *ns1__calculateTradeFee_, ns1__calculateTradeFeeResponse *ns1__calculateTradeFeeResponse_)
{	struct __ns1__calculateTradeFee soap_tmp___ns1__calculateTradeFee;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://127.0.0.1:8080/services/redCardService";
	if (soap_action == NULL)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__calculateTradeFee.ns1__calculateTradeFee_ = ns1__calculateTradeFee_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__calculateTradeFee(soap, &soap_tmp___ns1__calculateTradeFee);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__calculateTradeFee(soap, &soap_tmp___ns1__calculateTradeFee, "-ns1:calculateTradeFee", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__calculateTradeFee(soap, &soap_tmp___ns1__calculateTradeFee, "-ns1:calculateTradeFee", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__calculateTradeFeeResponse_)
		return soap_closesock(soap);
	ns1__calculateTradeFeeResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__calculateTradeFeeResponse_->soap_get(soap, "ns1:calculateTradeFeeResponse", "ns1:calculateTradeFeeResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__findCurrentBalance(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__findCurrentBalance *ns1__findCurrentBalance_, ns1__findCurrentBalanceResponse *ns1__findCurrentBalanceResponse_)
{	struct __ns1__findCurrentBalance soap_tmp___ns1__findCurrentBalance;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://127.0.0.1:8080/services/redCardService";
	if (soap_action == NULL)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__findCurrentBalance.ns1__findCurrentBalance_ = ns1__findCurrentBalance_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__findCurrentBalance(soap, &soap_tmp___ns1__findCurrentBalance);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__findCurrentBalance(soap, &soap_tmp___ns1__findCurrentBalance, "-ns1:findCurrentBalance", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__findCurrentBalance(soap, &soap_tmp___ns1__findCurrentBalance, "-ns1:findCurrentBalance", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__findCurrentBalanceResponse_)
		return soap_closesock(soap);
	ns1__findCurrentBalanceResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__findCurrentBalanceResponse_->soap_get(soap, "ns1:findCurrentBalanceResponse", "ns1:findCurrentBalanceResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__findByCustomer(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__findByCustomer *ns1__findByCustomer_, ns1__findByCustomerResponse *ns1__findByCustomerResponse_)
{	struct __ns1__findByCustomer soap_tmp___ns1__findByCustomer;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://127.0.0.1:8080/services/redCardService";
	if (soap_action == NULL)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__findByCustomer.ns1__findByCustomer_ = ns1__findByCustomer_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__findByCustomer(soap, &soap_tmp___ns1__findByCustomer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__findByCustomer(soap, &soap_tmp___ns1__findByCustomer, "-ns1:findByCustomer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__findByCustomer(soap, &soap_tmp___ns1__findByCustomer, "-ns1:findByCustomer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__findByCustomerResponse_)
		return soap_closesock(soap);
	ns1__findByCustomerResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__findByCustomerResponse_->soap_get(soap, "ns1:findByCustomerResponse", "ns1:findByCustomerResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__changePassword(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__changePassword *ns1__changePassword_, ns1__changePasswordResponse *ns1__changePasswordResponse_)
{	struct __ns1__changePassword soap_tmp___ns1__changePassword;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://127.0.0.1:8080/services/redCardService";
	if (soap_action == NULL)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__changePassword.ns1__changePassword_ = ns1__changePassword_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__changePassword(soap, &soap_tmp___ns1__changePassword);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__changePassword(soap, &soap_tmp___ns1__changePassword, "-ns1:changePassword", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__changePassword(soap, &soap_tmp___ns1__changePassword, "-ns1:changePassword", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__changePasswordResponse_)
		return soap_closesock(soap);
	ns1__changePasswordResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__changePasswordResponse_->soap_get(soap, "ns1:changePasswordResponse", "ns1:changePasswordResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__findTradeHistory(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__findTradeHistory *ns1__findTradeHistory_, ns1__findTradeHistoryResponse *ns1__findTradeHistoryResponse_)
{	struct __ns1__findTradeHistory soap_tmp___ns1__findTradeHistory;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://127.0.0.1:8080/services/redCardService";
	if (soap_action == NULL)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__findTradeHistory.ns1__findTradeHistory_ = ns1__findTradeHistory_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__findTradeHistory(soap, &soap_tmp___ns1__findTradeHistory);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__findTradeHistory(soap, &soap_tmp___ns1__findTradeHistory, "-ns1:findTradeHistory", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__findTradeHistory(soap, &soap_tmp___ns1__findTradeHistory, "-ns1:findTradeHistory", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__findTradeHistoryResponse_)
		return soap_closesock(soap);
	ns1__findTradeHistoryResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__findTradeHistoryResponse_->soap_get(soap, "ns1:findTradeHistoryResponse", "ns1:findTradeHistoryResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__cardTransfer(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__cardTransfer *ns1__cardTransfer_, ns1__cardTransferResponse *ns1__cardTransferResponse_)
{	struct __ns1__cardTransfer soap_tmp___ns1__cardTransfer;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://127.0.0.1:8080/services/redCardService";
	if (soap_action == NULL)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__cardTransfer.ns1__cardTransfer_ = ns1__cardTransfer_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__cardTransfer(soap, &soap_tmp___ns1__cardTransfer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__cardTransfer(soap, &soap_tmp___ns1__cardTransfer, "-ns1:cardTransfer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__cardTransfer(soap, &soap_tmp___ns1__cardTransfer, "-ns1:cardTransfer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__cardTransferResponse_)
		return soap_closesock(soap);
	ns1__cardTransferResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__cardTransferResponse_->soap_get(soap, "ns1:cardTransferResponse", "ns1:cardTransferResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__freezeCard(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__freezeCard *ns1__freezeCard_, ns1__freezeCardResponse *ns1__freezeCardResponse_)
{	struct __ns1__freezeCard soap_tmp___ns1__freezeCard;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://127.0.0.1:8080/services/redCardService";
	if (soap_action == NULL)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__freezeCard.ns1__freezeCard_ = ns1__freezeCard_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__freezeCard(soap, &soap_tmp___ns1__freezeCard);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__freezeCard(soap, &soap_tmp___ns1__freezeCard, "-ns1:freezeCard", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__freezeCard(soap, &soap_tmp___ns1__freezeCard, "-ns1:freezeCard", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__freezeCardResponse_)
		return soap_closesock(soap);
	ns1__freezeCardResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__freezeCardResponse_->soap_get(soap, "ns1:freezeCardResponse", "ns1:freezeCardResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__isAlive(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__isAlive *ns1__isAlive_, ns1__isAliveResponse *ns1__isAliveResponse_)
{	struct __ns1__isAlive soap_tmp___ns1__isAlive;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://127.0.0.1:8080/services/redCardService";
	if (soap_action == NULL)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__isAlive.ns1__isAlive_ = ns1__isAlive_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__isAlive(soap, &soap_tmp___ns1__isAlive);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__isAlive(soap, &soap_tmp___ns1__isAlive, "-ns1:isAlive", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__isAlive(soap, &soap_tmp___ns1__isAlive, "-ns1:isAlive", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__isAliveResponse_)
		return soap_closesock(soap);
	ns1__isAliveResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__isAliveResponse_->soap_get(soap, "ns1:isAliveResponse", "ns1:isAliveResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__pay(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__pay *ns1__pay_, ns1__payResponse *ns1__payResponse_)
{	struct __ns1__pay soap_tmp___ns1__pay;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://127.0.0.1:8080/services/redCardService";
	if (soap_action == NULL)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__pay.ns1__pay_ = ns1__pay_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__pay(soap, &soap_tmp___ns1__pay);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__pay(soap, &soap_tmp___ns1__pay, "-ns1:pay", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__pay(soap, &soap_tmp___ns1__pay, "-ns1:pay", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__payResponse_)
		return soap_closesock(soap);
	ns1__payResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__payResponse_->soap_get(soap, "ns1:payResponse", "ns1:payResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
