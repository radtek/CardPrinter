/* soapC.cpp
   Generated by gSOAP 2.8.15 from wpsoap.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.15 2013-08-25 18:27:03 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_ns1__getMainKeyResponse:
		return soap_in_ns1__getMainKeyResponse(soap, NULL, NULL, "ns1:getMainKeyResponse");
	case SOAP_TYPE_ns1__getMainKey:
		return soap_in_ns1__getMainKey(soap, NULL, NULL, "ns1:getMainKey");
	case SOAP_TYPE_ns1__getCardTypeRulesResponse:
		return soap_in_ns1__getCardTypeRulesResponse(soap, NULL, NULL, "ns1:getCardTypeRulesResponse");
	case SOAP_TYPE_ns1__getCardTypeRules:
		return soap_in_ns1__getCardTypeRules(soap, NULL, NULL, "ns1:getCardTypeRules");
	case SOAP_TYPE_ns1__storeCardResponse:
		return soap_in_ns1__storeCardResponse(soap, NULL, NULL, "ns1:storeCardResponse");
	case SOAP_TYPE_ns1__storeCard:
		return soap_in_ns1__storeCard(soap, NULL, NULL, "ns1:storeCard");
	case SOAP_TYPE_ns1__generatePasswordResponse:
		return soap_in_ns1__generatePasswordResponse(soap, NULL, NULL, "ns1:generatePasswordResponse");
	case SOAP_TYPE_ns1__generatePassword:
		return soap_in_ns1__generatePassword(soap, NULL, NULL, "ns1:generatePassword");
	case SOAP_TYPE_ns1__generatePsamCardNoResponse:
		return soap_in_ns1__generatePsamCardNoResponse(soap, NULL, NULL, "ns1:generatePsamCardNoResponse");
	case SOAP_TYPE_ns1__generatePsamCardNo:
		return soap_in_ns1__generatePsamCardNo(soap, NULL, NULL, "ns1:generatePsamCardNo");
	case SOAP_TYPE_ns1__storePsamCardResponse:
		return soap_in_ns1__storePsamCardResponse(soap, NULL, NULL, "ns1:storePsamCardResponse");
	case SOAP_TYPE_ns1__storePsamCard:
		return soap_in_ns1__storePsamCard(soap, NULL, NULL, "ns1:storePsamCard");
	case SOAP_TYPE_ns1__verifyUserResponse:
		return soap_in_ns1__verifyUserResponse(soap, NULL, NULL, "ns1:verifyUserResponse");
	case SOAP_TYPE_ns1__verifyUser:
		return soap_in_ns1__verifyUser(soap, NULL, NULL, "ns1:verifyUser");
	case SOAP_TYPE_PointerTons1__getMainKeyResponse:
		return soap_in_PointerTons1__getMainKeyResponse(soap, NULL, NULL, "ns1:getMainKeyResponse");
	case SOAP_TYPE_PointerTons1__getMainKey:
		return soap_in_PointerTons1__getMainKey(soap, NULL, NULL, "ns1:getMainKey");
	case SOAP_TYPE_PointerTons1__getCardTypeRulesResponse:
		return soap_in_PointerTons1__getCardTypeRulesResponse(soap, NULL, NULL, "ns1:getCardTypeRulesResponse");
	case SOAP_TYPE_PointerTons1__getCardTypeRules:
		return soap_in_PointerTons1__getCardTypeRules(soap, NULL, NULL, "ns1:getCardTypeRules");
	case SOAP_TYPE_PointerTons1__storeCardResponse:
		return soap_in_PointerTons1__storeCardResponse(soap, NULL, NULL, "ns1:storeCardResponse");
	case SOAP_TYPE_PointerTons1__storeCard:
		return soap_in_PointerTons1__storeCard(soap, NULL, NULL, "ns1:storeCard");
	case SOAP_TYPE_PointerTons1__generatePasswordResponse:
		return soap_in_PointerTons1__generatePasswordResponse(soap, NULL, NULL, "ns1:generatePasswordResponse");
	case SOAP_TYPE_PointerTons1__generatePassword:
		return soap_in_PointerTons1__generatePassword(soap, NULL, NULL, "ns1:generatePassword");
	case SOAP_TYPE_PointerTons1__storePsamCardResponse:
		return soap_in_PointerTons1__storePsamCardResponse(soap, NULL, NULL, "ns1:storePsamCardResponse");
	case SOAP_TYPE_PointerTons1__storePsamCard:
		return soap_in_PointerTons1__storePsamCard(soap, NULL, NULL, "ns1:storePsamCard");
	case SOAP_TYPE_PointerTons1__generatePsamCardNoResponse:
		return soap_in_PointerTons1__generatePsamCardNoResponse(soap, NULL, NULL, "ns1:generatePsamCardNoResponse");
	case SOAP_TYPE_PointerTons1__generatePsamCardNo:
		return soap_in_PointerTons1__generatePsamCardNo(soap, NULL, NULL, "ns1:generatePsamCardNo");
	case SOAP_TYPE_PointerTons1__verifyUserResponse:
		return soap_in_PointerTons1__verifyUserResponse(soap, NULL, NULL, "ns1:verifyUserResponse");
	case SOAP_TYPE_PointerTons1__verifyUser:
		return soap_in_PointerTons1__verifyUser(soap, NULL, NULL, "ns1:verifyUser");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:getMainKeyResponse"))
		{	*type = SOAP_TYPE_ns1__getMainKeyResponse;
			return soap_in_ns1__getMainKeyResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getMainKey"))
		{	*type = SOAP_TYPE_ns1__getMainKey;
			return soap_in_ns1__getMainKey(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getCardTypeRulesResponse"))
		{	*type = SOAP_TYPE_ns1__getCardTypeRulesResponse;
			return soap_in_ns1__getCardTypeRulesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getCardTypeRules"))
		{	*type = SOAP_TYPE_ns1__getCardTypeRules;
			return soap_in_ns1__getCardTypeRules(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:storeCardResponse"))
		{	*type = SOAP_TYPE_ns1__storeCardResponse;
			return soap_in_ns1__storeCardResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:storeCard"))
		{	*type = SOAP_TYPE_ns1__storeCard;
			return soap_in_ns1__storeCard(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:generatePasswordResponse"))
		{	*type = SOAP_TYPE_ns1__generatePasswordResponse;
			return soap_in_ns1__generatePasswordResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:generatePassword"))
		{	*type = SOAP_TYPE_ns1__generatePassword;
			return soap_in_ns1__generatePassword(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:generatePsamCardNoResponse"))
		{	*type = SOAP_TYPE_ns1__generatePsamCardNoResponse;
			return soap_in_ns1__generatePsamCardNoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:generatePsamCardNo"))
		{	*type = SOAP_TYPE_ns1__generatePsamCardNo;
			return soap_in_ns1__generatePsamCardNo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:storePsamCardResponse"))
		{	*type = SOAP_TYPE_ns1__storePsamCardResponse;
			return soap_in_ns1__storePsamCardResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:storePsamCard"))
		{	*type = SOAP_TYPE_ns1__storePsamCard;
			return soap_in_ns1__storePsamCard(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:verifyUserResponse"))
		{	*type = SOAP_TYPE_ns1__verifyUserResponse;
			return soap_in_ns1__verifyUserResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:verifyUser"))
		{	*type = SOAP_TYPE_ns1__verifyUser;
			return soap_in_ns1__verifyUser(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_ns1__getMainKeyResponse:
		return ((ns1__getMainKeyResponse *)ptr)->soap_out(soap, tag, id, "ns1:getMainKeyResponse");
	case SOAP_TYPE_ns1__getMainKey:
		return ((ns1__getMainKey *)ptr)->soap_out(soap, tag, id, "ns1:getMainKey");
	case SOAP_TYPE_ns1__getCardTypeRulesResponse:
		return ((ns1__getCardTypeRulesResponse *)ptr)->soap_out(soap, tag, id, "ns1:getCardTypeRulesResponse");
	case SOAP_TYPE_ns1__getCardTypeRules:
		return ((ns1__getCardTypeRules *)ptr)->soap_out(soap, tag, id, "ns1:getCardTypeRules");
	case SOAP_TYPE_ns1__storeCardResponse:
		return ((ns1__storeCardResponse *)ptr)->soap_out(soap, tag, id, "ns1:storeCardResponse");
	case SOAP_TYPE_ns1__storeCard:
		return ((ns1__storeCard *)ptr)->soap_out(soap, tag, id, "ns1:storeCard");
	case SOAP_TYPE_ns1__generatePasswordResponse:
		return ((ns1__generatePasswordResponse *)ptr)->soap_out(soap, tag, id, "ns1:generatePasswordResponse");
	case SOAP_TYPE_ns1__generatePassword:
		return ((ns1__generatePassword *)ptr)->soap_out(soap, tag, id, "ns1:generatePassword");
	case SOAP_TYPE_ns1__generatePsamCardNoResponse:
		return ((ns1__generatePsamCardNoResponse *)ptr)->soap_out(soap, tag, id, "ns1:generatePsamCardNoResponse");
	case SOAP_TYPE_ns1__generatePsamCardNo:
		return ((ns1__generatePsamCardNo *)ptr)->soap_out(soap, tag, id, "ns1:generatePsamCardNo");
	case SOAP_TYPE_ns1__storePsamCardResponse:
		return ((ns1__storePsamCardResponse *)ptr)->soap_out(soap, tag, id, "ns1:storePsamCardResponse");
	case SOAP_TYPE_ns1__storePsamCard:
		return ((ns1__storePsamCard *)ptr)->soap_out(soap, tag, id, "ns1:storePsamCard");
	case SOAP_TYPE_ns1__verifyUserResponse:
		return ((ns1__verifyUserResponse *)ptr)->soap_out(soap, tag, id, "ns1:verifyUserResponse");
	case SOAP_TYPE_ns1__verifyUser:
		return ((ns1__verifyUser *)ptr)->soap_out(soap, tag, id, "ns1:verifyUser");
	case SOAP_TYPE_PointerTons1__getMainKeyResponse:
		return soap_out_PointerTons1__getMainKeyResponse(soap, tag, id, (ns1__getMainKeyResponse *const*)ptr, "ns1:getMainKeyResponse");
	case SOAP_TYPE_PointerTons1__getMainKey:
		return soap_out_PointerTons1__getMainKey(soap, tag, id, (ns1__getMainKey *const*)ptr, "ns1:getMainKey");
	case SOAP_TYPE_PointerTons1__getCardTypeRulesResponse:
		return soap_out_PointerTons1__getCardTypeRulesResponse(soap, tag, id, (ns1__getCardTypeRulesResponse *const*)ptr, "ns1:getCardTypeRulesResponse");
	case SOAP_TYPE_PointerTons1__getCardTypeRules:
		return soap_out_PointerTons1__getCardTypeRules(soap, tag, id, (ns1__getCardTypeRules *const*)ptr, "ns1:getCardTypeRules");
	case SOAP_TYPE_PointerTons1__storeCardResponse:
		return soap_out_PointerTons1__storeCardResponse(soap, tag, id, (ns1__storeCardResponse *const*)ptr, "ns1:storeCardResponse");
	case SOAP_TYPE_PointerTons1__storeCard:
		return soap_out_PointerTons1__storeCard(soap, tag, id, (ns1__storeCard *const*)ptr, "ns1:storeCard");
	case SOAP_TYPE_PointerTons1__generatePasswordResponse:
		return soap_out_PointerTons1__generatePasswordResponse(soap, tag, id, (ns1__generatePasswordResponse *const*)ptr, "ns1:generatePasswordResponse");
	case SOAP_TYPE_PointerTons1__generatePassword:
		return soap_out_PointerTons1__generatePassword(soap, tag, id, (ns1__generatePassword *const*)ptr, "ns1:generatePassword");
	case SOAP_TYPE_PointerTons1__storePsamCardResponse:
		return soap_out_PointerTons1__storePsamCardResponse(soap, tag, id, (ns1__storePsamCardResponse *const*)ptr, "ns1:storePsamCardResponse");
	case SOAP_TYPE_PointerTons1__storePsamCard:
		return soap_out_PointerTons1__storePsamCard(soap, tag, id, (ns1__storePsamCard *const*)ptr, "ns1:storePsamCard");
	case SOAP_TYPE_PointerTons1__generatePsamCardNoResponse:
		return soap_out_PointerTons1__generatePsamCardNoResponse(soap, tag, id, (ns1__generatePsamCardNoResponse *const*)ptr, "ns1:generatePsamCardNoResponse");
	case SOAP_TYPE_PointerTons1__generatePsamCardNo:
		return soap_out_PointerTons1__generatePsamCardNo(soap, tag, id, (ns1__generatePsamCardNo *const*)ptr, "ns1:generatePsamCardNo");
	case SOAP_TYPE_PointerTons1__verifyUserResponse:
		return soap_out_PointerTons1__verifyUserResponse(soap, tag, id, (ns1__verifyUserResponse *const*)ptr, "ns1:verifyUserResponse");
	case SOAP_TYPE_PointerTons1__verifyUser:
		return soap_out_PointerTons1__verifyUser(soap, tag, id, (ns1__verifyUser *const*)ptr, "ns1:verifyUser");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns1__getMainKeyResponse:
		((ns1__getMainKeyResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getMainKey:
		((ns1__getMainKey *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getCardTypeRulesResponse:
		((ns1__getCardTypeRulesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getCardTypeRules:
		((ns1__getCardTypeRules *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__storeCardResponse:
		((ns1__storeCardResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__storeCard:
		((ns1__storeCard *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__generatePasswordResponse:
		((ns1__generatePasswordResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__generatePassword:
		((ns1__generatePassword *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__generatePsamCardNoResponse:
		((ns1__generatePsamCardNoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__generatePsamCardNo:
		((ns1__generatePsamCardNo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__storePsamCardResponse:
		((ns1__storePsamCardResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__storePsamCard:
		((ns1__storePsamCard *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__verifyUserResponse:
		((ns1__verifyUserResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__verifyUser:
		((ns1__verifyUser *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__getMainKey:
		soap_serialize___ns1__getMainKey(soap, (const struct __ns1__getMainKey *)ptr);
		break;
	case SOAP_TYPE___ns1__getCardTypeRules:
		soap_serialize___ns1__getCardTypeRules(soap, (const struct __ns1__getCardTypeRules *)ptr);
		break;
	case SOAP_TYPE___ns1__storeCard:
		soap_serialize___ns1__storeCard(soap, (const struct __ns1__storeCard *)ptr);
		break;
	case SOAP_TYPE___ns1__generatePassword:
		soap_serialize___ns1__generatePassword(soap, (const struct __ns1__generatePassword *)ptr);
		break;
	case SOAP_TYPE___ns1__storePsamCard:
		soap_serialize___ns1__storePsamCard(soap, (const struct __ns1__storePsamCard *)ptr);
		break;
	case SOAP_TYPE___ns1__generatePsamCardNo:
		soap_serialize___ns1__generatePsamCardNo(soap, (const struct __ns1__generatePsamCardNo *)ptr);
		break;
	case SOAP_TYPE___ns1__verifyUser:
		soap_serialize___ns1__verifyUser(soap, (const struct __ns1__verifyUser *)ptr);
		break;
	case SOAP_TYPE_PointerTons1__getMainKeyResponse:
		soap_serialize_PointerTons1__getMainKeyResponse(soap, (ns1__getMainKeyResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__getMainKey:
		soap_serialize_PointerTons1__getMainKey(soap, (ns1__getMainKey *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__getCardTypeRulesResponse:
		soap_serialize_PointerTons1__getCardTypeRulesResponse(soap, (ns1__getCardTypeRulesResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__getCardTypeRules:
		soap_serialize_PointerTons1__getCardTypeRules(soap, (ns1__getCardTypeRules *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__storeCardResponse:
		soap_serialize_PointerTons1__storeCardResponse(soap, (ns1__storeCardResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__storeCard:
		soap_serialize_PointerTons1__storeCard(soap, (ns1__storeCard *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__generatePasswordResponse:
		soap_serialize_PointerTons1__generatePasswordResponse(soap, (ns1__generatePasswordResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__generatePassword:
		soap_serialize_PointerTons1__generatePassword(soap, (ns1__generatePassword *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__storePsamCardResponse:
		soap_serialize_PointerTons1__storePsamCardResponse(soap, (ns1__storePsamCardResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__storePsamCard:
		soap_serialize_PointerTons1__storePsamCard(soap, (ns1__storePsamCard *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__generatePsamCardNoResponse:
		soap_serialize_PointerTons1__generatePsamCardNoResponse(soap, (ns1__generatePsamCardNoResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__generatePsamCardNo:
		soap_serialize_PointerTons1__generatePsamCardNo(soap, (ns1__generatePsamCardNo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__verifyUserResponse:
		soap_serialize_PointerTons1__verifyUserResponse(soap, (ns1__verifyUserResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__verifyUser:
		soap_serialize_PointerTons1__verifyUser(soap, (ns1__verifyUser *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_ns1__verifyUser:
		return (void*)soap_instantiate_ns1__verifyUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__verifyUserResponse:
		return (void*)soap_instantiate_ns1__verifyUserResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__storePsamCard:
		return (void*)soap_instantiate_ns1__storePsamCard(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__storePsamCardResponse:
		return (void*)soap_instantiate_ns1__storePsamCardResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__generatePsamCardNo:
		return (void*)soap_instantiate_ns1__generatePsamCardNo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__generatePsamCardNoResponse:
		return (void*)soap_instantiate_ns1__generatePsamCardNoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__generatePassword:
		return (void*)soap_instantiate_ns1__generatePassword(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__generatePasswordResponse:
		return (void*)soap_instantiate_ns1__generatePasswordResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__storeCard:
		return (void*)soap_instantiate_ns1__storeCard(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__storeCardResponse:
		return (void*)soap_instantiate_ns1__storeCardResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getCardTypeRules:
		return (void*)soap_instantiate_ns1__getCardTypeRules(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getCardTypeRulesResponse:
		return (void*)soap_instantiate_ns1__getCardTypeRulesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getMainKey:
		return (void*)soap_instantiate_ns1__getMainKey(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getMainKeyResponse:
		return (void*)soap_instantiate_ns1__getMainKeyResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__verifyUser:
		return (void*)soap_instantiate___ns1__verifyUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__generatePsamCardNo:
		return (void*)soap_instantiate___ns1__generatePsamCardNo(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__storePsamCard:
		return (void*)soap_instantiate___ns1__storePsamCard(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__generatePassword:
		return (void*)soap_instantiate___ns1__generatePassword(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__storeCard:
		return (void*)soap_instantiate___ns1__storeCard(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getCardTypeRules:
		return (void*)soap_instantiate___ns1__getCardTypeRules(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getMainKey:
		return (void*)soap_instantiate___ns1__getMainKey(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_ns1__verifyUser:
		if (p->size < 0)
			SOAP_DELETE((ns1__verifyUser*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__verifyUser*)p->ptr);
		break;
	case SOAP_TYPE_ns1__verifyUserResponse:
		if (p->size < 0)
			SOAP_DELETE((ns1__verifyUserResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__verifyUserResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__storePsamCard:
		if (p->size < 0)
			SOAP_DELETE((ns1__storePsamCard*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__storePsamCard*)p->ptr);
		break;
	case SOAP_TYPE_ns1__storePsamCardResponse:
		if (p->size < 0)
			SOAP_DELETE((ns1__storePsamCardResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__storePsamCardResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__generatePsamCardNo:
		if (p->size < 0)
			SOAP_DELETE((ns1__generatePsamCardNo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__generatePsamCardNo*)p->ptr);
		break;
	case SOAP_TYPE_ns1__generatePsamCardNoResponse:
		if (p->size < 0)
			SOAP_DELETE((ns1__generatePsamCardNoResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__generatePsamCardNoResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__generatePassword:
		if (p->size < 0)
			SOAP_DELETE((ns1__generatePassword*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__generatePassword*)p->ptr);
		break;
	case SOAP_TYPE_ns1__generatePasswordResponse:
		if (p->size < 0)
			SOAP_DELETE((ns1__generatePasswordResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__generatePasswordResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__storeCard:
		if (p->size < 0)
			SOAP_DELETE((ns1__storeCard*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__storeCard*)p->ptr);
		break;
	case SOAP_TYPE_ns1__storeCardResponse:
		if (p->size < 0)
			SOAP_DELETE((ns1__storeCardResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__storeCardResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__getCardTypeRules:
		if (p->size < 0)
			SOAP_DELETE((ns1__getCardTypeRules*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__getCardTypeRules*)p->ptr);
		break;
	case SOAP_TYPE_ns1__getCardTypeRulesResponse:
		if (p->size < 0)
			SOAP_DELETE((ns1__getCardTypeRulesResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__getCardTypeRulesResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__getMainKey:
		if (p->size < 0)
			SOAP_DELETE((ns1__getMainKey*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__getMainKey*)p->ptr);
		break;
	case SOAP_TYPE_ns1__getMainKeyResponse:
		if (p->size < 0)
			SOAP_DELETE((ns1__getMainKeyResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__getMainKeyResponse*)p->ptr);
		break;
	case SOAP_TYPE___ns1__verifyUser:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__verifyUser*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__verifyUser*)p->ptr);
		break;
	case SOAP_TYPE___ns1__generatePsamCardNo:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__generatePsamCardNo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__generatePsamCardNo*)p->ptr);
		break;
	case SOAP_TYPE___ns1__storePsamCard:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__storePsamCard*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__storePsamCard*)p->ptr);
		break;
	case SOAP_TYPE___ns1__generatePassword:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__generatePassword*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__generatePassword*)p->ptr);
		break;
	case SOAP_TYPE___ns1__storeCard:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__storeCard*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__storeCard*)p->ptr);
		break;
	case SOAP_TYPE___ns1__getCardTypeRules:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__getCardTypeRules*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__getCardTypeRules*)p->ptr);
		break;
	case SOAP_TYPE___ns1__getMainKey:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__getMainKey*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__getMainKey*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getMainKeyResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__getMainKeyResponse::return_);
	/* transient soap skipped */
}

void ns1__getMainKeyResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__getMainKeyResponse::return_);
	/* transient soap skipped */
#endif
}

int ns1__getMainKeyResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getMainKeyResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getMainKeyResponse(struct soap *soap, const char *tag, int id, const ns1__getMainKeyResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getMainKeyResponse), type))
		return soap->error;
	if (soap_out_string(soap, "return", -1, &(a->ns1__getMainKeyResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__getMainKeyResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__getMainKeyResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getMainKeyResponse * SOAP_FMAC4 soap_in_ns1__getMainKeyResponse(struct soap *soap, const char *tag, ns1__getMainKeyResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getMainKeyResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getMainKeyResponse, sizeof(ns1__getMainKeyResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__getMainKeyResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__getMainKeyResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "return", &(a->ns1__getMainKeyResponse::return_), "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getMainKeyResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getMainKeyResponse, 0, sizeof(ns1__getMainKeyResponse), 0, soap_copy_ns1__getMainKeyResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__getMainKeyResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__getMainKeyResponse);
	if (this->soap_out(soap, tag?tag:"ns1:getMainKeyResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getMainKeyResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getMainKeyResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getMainKeyResponse * SOAP_FMAC4 soap_get_ns1__getMainKeyResponse(struct soap *soap, ns1__getMainKeyResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getMainKeyResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__getMainKeyResponse * SOAP_FMAC2 soap_instantiate_ns1__getMainKeyResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getMainKeyResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__getMainKeyResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__getMainKeyResponse);
		if (size)
			*size = sizeof(ns1__getMainKeyResponse);
		((ns1__getMainKeyResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__getMainKeyResponse, n);
		if (size)
			*size = n * sizeof(ns1__getMainKeyResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__getMainKeyResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__getMainKeyResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getMainKeyResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__getMainKeyResponse %p -> %p\n", q, p));
	*(ns1__getMainKeyResponse*)p = *(ns1__getMainKeyResponse*)q;
}

void ns1__getMainKey::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void ns1__getMainKey::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int ns1__getMainKey::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getMainKey(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getMainKey(struct soap *soap, const char *tag, int id, const ns1__getMainKey *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getMainKey), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__getMainKey::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__getMainKey(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getMainKey * SOAP_FMAC4 soap_in_ns1__getMainKey(struct soap *soap, const char *tag, ns1__getMainKey *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getMainKey *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getMainKey, sizeof(ns1__getMainKey), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__getMainKey)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__getMainKey *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getMainKey *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getMainKey, 0, sizeof(ns1__getMainKey), 0, soap_copy_ns1__getMainKey);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__getMainKey::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__getMainKey);
	if (this->soap_out(soap, tag?tag:"ns1:getMainKey", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getMainKey::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getMainKey(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getMainKey * SOAP_FMAC4 soap_get_ns1__getMainKey(struct soap *soap, ns1__getMainKey *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getMainKey(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__getMainKey * SOAP_FMAC2 soap_instantiate_ns1__getMainKey(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getMainKey(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__getMainKey, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__getMainKey);
		if (size)
			*size = sizeof(ns1__getMainKey);
		((ns1__getMainKey*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__getMainKey, n);
		if (size)
			*size = n * sizeof(ns1__getMainKey);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__getMainKey*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__getMainKey*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getMainKey(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__getMainKey %p -> %p\n", q, p));
	*(ns1__getMainKey*)p = *(ns1__getMainKey*)q;
}

void ns1__getCardTypeRulesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__getCardTypeRulesResponse::return_);
	/* transient soap skipped */
}

void ns1__getCardTypeRulesResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__getCardTypeRulesResponse::return_);
	/* transient soap skipped */
#endif
}

int ns1__getCardTypeRulesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getCardTypeRulesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getCardTypeRulesResponse(struct soap *soap, const char *tag, int id, const ns1__getCardTypeRulesResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getCardTypeRulesResponse), type))
		return soap->error;
	if (soap_out_string(soap, "return", -1, &(a->ns1__getCardTypeRulesResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__getCardTypeRulesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__getCardTypeRulesResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getCardTypeRulesResponse * SOAP_FMAC4 soap_in_ns1__getCardTypeRulesResponse(struct soap *soap, const char *tag, ns1__getCardTypeRulesResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getCardTypeRulesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getCardTypeRulesResponse, sizeof(ns1__getCardTypeRulesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__getCardTypeRulesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__getCardTypeRulesResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "return", &(a->ns1__getCardTypeRulesResponse::return_), "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getCardTypeRulesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getCardTypeRulesResponse, 0, sizeof(ns1__getCardTypeRulesResponse), 0, soap_copy_ns1__getCardTypeRulesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__getCardTypeRulesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__getCardTypeRulesResponse);
	if (this->soap_out(soap, tag?tag:"ns1:getCardTypeRulesResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getCardTypeRulesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getCardTypeRulesResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getCardTypeRulesResponse * SOAP_FMAC4 soap_get_ns1__getCardTypeRulesResponse(struct soap *soap, ns1__getCardTypeRulesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getCardTypeRulesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__getCardTypeRulesResponse * SOAP_FMAC2 soap_instantiate_ns1__getCardTypeRulesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getCardTypeRulesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__getCardTypeRulesResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__getCardTypeRulesResponse);
		if (size)
			*size = sizeof(ns1__getCardTypeRulesResponse);
		((ns1__getCardTypeRulesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__getCardTypeRulesResponse, n);
		if (size)
			*size = n * sizeof(ns1__getCardTypeRulesResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__getCardTypeRulesResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__getCardTypeRulesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getCardTypeRulesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__getCardTypeRulesResponse %p -> %p\n", q, p));
	*(ns1__getCardTypeRulesResponse*)p = *(ns1__getCardTypeRulesResponse*)q;
}

void ns1__getCardTypeRules::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void ns1__getCardTypeRules::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int ns1__getCardTypeRules::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getCardTypeRules(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getCardTypeRules(struct soap *soap, const char *tag, int id, const ns1__getCardTypeRules *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getCardTypeRules), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__getCardTypeRules::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__getCardTypeRules(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getCardTypeRules * SOAP_FMAC4 soap_in_ns1__getCardTypeRules(struct soap *soap, const char *tag, ns1__getCardTypeRules *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getCardTypeRules *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getCardTypeRules, sizeof(ns1__getCardTypeRules), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__getCardTypeRules)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__getCardTypeRules *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getCardTypeRules *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getCardTypeRules, 0, sizeof(ns1__getCardTypeRules), 0, soap_copy_ns1__getCardTypeRules);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__getCardTypeRules::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__getCardTypeRules);
	if (this->soap_out(soap, tag?tag:"ns1:getCardTypeRules", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getCardTypeRules::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getCardTypeRules(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getCardTypeRules * SOAP_FMAC4 soap_get_ns1__getCardTypeRules(struct soap *soap, ns1__getCardTypeRules *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getCardTypeRules(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__getCardTypeRules * SOAP_FMAC2 soap_instantiate_ns1__getCardTypeRules(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getCardTypeRules(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__getCardTypeRules, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__getCardTypeRules);
		if (size)
			*size = sizeof(ns1__getCardTypeRules);
		((ns1__getCardTypeRules*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__getCardTypeRules, n);
		if (size)
			*size = n * sizeof(ns1__getCardTypeRules);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__getCardTypeRules*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__getCardTypeRules*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getCardTypeRules(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__getCardTypeRules %p -> %p\n", q, p));
	*(ns1__getCardTypeRules*)p = *(ns1__getCardTypeRules*)q;
}

void ns1__storeCardResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__storeCardResponse::return_);
	/* transient soap skipped */
}

void ns1__storeCardResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__storeCardResponse::return_);
	/* transient soap skipped */
#endif
}

int ns1__storeCardResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__storeCardResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__storeCardResponse(struct soap *soap, const char *tag, int id, const ns1__storeCardResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__storeCardResponse), type))
		return soap->error;
	if (soap_out_string(soap, "return", -1, &(a->ns1__storeCardResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__storeCardResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__storeCardResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__storeCardResponse * SOAP_FMAC4 soap_in_ns1__storeCardResponse(struct soap *soap, const char *tag, ns1__storeCardResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__storeCardResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__storeCardResponse, sizeof(ns1__storeCardResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__storeCardResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__storeCardResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "return", &(a->ns1__storeCardResponse::return_), "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__storeCardResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__storeCardResponse, 0, sizeof(ns1__storeCardResponse), 0, soap_copy_ns1__storeCardResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__storeCardResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__storeCardResponse);
	if (this->soap_out(soap, tag?tag:"ns1:storeCardResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__storeCardResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__storeCardResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__storeCardResponse * SOAP_FMAC4 soap_get_ns1__storeCardResponse(struct soap *soap, ns1__storeCardResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__storeCardResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__storeCardResponse * SOAP_FMAC2 soap_instantiate_ns1__storeCardResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__storeCardResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__storeCardResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__storeCardResponse);
		if (size)
			*size = sizeof(ns1__storeCardResponse);
		((ns1__storeCardResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__storeCardResponse, n);
		if (size)
			*size = n * sizeof(ns1__storeCardResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__storeCardResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__storeCardResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__storeCardResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__storeCardResponse %p -> %p\n", q, p));
	*(ns1__storeCardResponse*)p = *(ns1__storeCardResponse*)q;
}

void ns1__storeCard::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__storeCard::arg0);
	/* transient soap skipped */
}

void ns1__storeCard::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__storeCard::arg0);
	/* transient soap skipped */
#endif
}

int ns1__storeCard::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__storeCard(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__storeCard(struct soap *soap, const char *tag, int id, const ns1__storeCard *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__storeCard), type))
		return soap->error;
	if (soap_out_string(soap, "arg0", -1, &(a->ns1__storeCard::arg0), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__storeCard::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__storeCard(soap, tag, this, type);
}

SOAP_FMAC3 ns1__storeCard * SOAP_FMAC4 soap_in_ns1__storeCard(struct soap *soap, const char *tag, ns1__storeCard *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__storeCard *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__storeCard, sizeof(ns1__storeCard), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__storeCard)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__storeCard *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_arg01 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "arg0", &(a->ns1__storeCard::arg0), "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__storeCard *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__storeCard, 0, sizeof(ns1__storeCard), 0, soap_copy_ns1__storeCard);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__storeCard::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__storeCard);
	if (this->soap_out(soap, tag?tag:"ns1:storeCard", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__storeCard::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__storeCard(soap, this, tag, type);
}

SOAP_FMAC3 ns1__storeCard * SOAP_FMAC4 soap_get_ns1__storeCard(struct soap *soap, ns1__storeCard *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__storeCard(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__storeCard * SOAP_FMAC2 soap_instantiate_ns1__storeCard(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__storeCard(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__storeCard, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__storeCard);
		if (size)
			*size = sizeof(ns1__storeCard);
		((ns1__storeCard*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__storeCard, n);
		if (size)
			*size = n * sizeof(ns1__storeCard);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__storeCard*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__storeCard*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__storeCard(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__storeCard %p -> %p\n", q, p));
	*(ns1__storeCard*)p = *(ns1__storeCard*)q;
}

void ns1__generatePasswordResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__generatePasswordResponse::return_);
	/* transient soap skipped */
}

void ns1__generatePasswordResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__generatePasswordResponse::return_);
	/* transient soap skipped */
#endif
}

int ns1__generatePasswordResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__generatePasswordResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__generatePasswordResponse(struct soap *soap, const char *tag, int id, const ns1__generatePasswordResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__generatePasswordResponse), type))
		return soap->error;
	if (soap_out_string(soap, "return", -1, &(a->ns1__generatePasswordResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__generatePasswordResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__generatePasswordResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__generatePasswordResponse * SOAP_FMAC4 soap_in_ns1__generatePasswordResponse(struct soap *soap, const char *tag, ns1__generatePasswordResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__generatePasswordResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__generatePasswordResponse, sizeof(ns1__generatePasswordResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__generatePasswordResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__generatePasswordResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "return", &(a->ns1__generatePasswordResponse::return_), "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__generatePasswordResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__generatePasswordResponse, 0, sizeof(ns1__generatePasswordResponse), 0, soap_copy_ns1__generatePasswordResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__generatePasswordResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__generatePasswordResponse);
	if (this->soap_out(soap, tag?tag:"ns1:generatePasswordResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__generatePasswordResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__generatePasswordResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__generatePasswordResponse * SOAP_FMAC4 soap_get_ns1__generatePasswordResponse(struct soap *soap, ns1__generatePasswordResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__generatePasswordResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__generatePasswordResponse * SOAP_FMAC2 soap_instantiate_ns1__generatePasswordResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__generatePasswordResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__generatePasswordResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__generatePasswordResponse);
		if (size)
			*size = sizeof(ns1__generatePasswordResponse);
		((ns1__generatePasswordResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__generatePasswordResponse, n);
		if (size)
			*size = n * sizeof(ns1__generatePasswordResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__generatePasswordResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__generatePasswordResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__generatePasswordResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__generatePasswordResponse %p -> %p\n", q, p));
	*(ns1__generatePasswordResponse*)p = *(ns1__generatePasswordResponse*)q;
}

void ns1__generatePassword::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void ns1__generatePassword::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int ns1__generatePassword::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__generatePassword(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__generatePassword(struct soap *soap, const char *tag, int id, const ns1__generatePassword *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__generatePassword), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__generatePassword::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__generatePassword(soap, tag, this, type);
}

SOAP_FMAC3 ns1__generatePassword * SOAP_FMAC4 soap_in_ns1__generatePassword(struct soap *soap, const char *tag, ns1__generatePassword *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__generatePassword *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__generatePassword, sizeof(ns1__generatePassword), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__generatePassword)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__generatePassword *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__generatePassword *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__generatePassword, 0, sizeof(ns1__generatePassword), 0, soap_copy_ns1__generatePassword);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__generatePassword::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__generatePassword);
	if (this->soap_out(soap, tag?tag:"ns1:generatePassword", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__generatePassword::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__generatePassword(soap, this, tag, type);
}

SOAP_FMAC3 ns1__generatePassword * SOAP_FMAC4 soap_get_ns1__generatePassword(struct soap *soap, ns1__generatePassword *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__generatePassword(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__generatePassword * SOAP_FMAC2 soap_instantiate_ns1__generatePassword(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__generatePassword(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__generatePassword, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__generatePassword);
		if (size)
			*size = sizeof(ns1__generatePassword);
		((ns1__generatePassword*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__generatePassword, n);
		if (size)
			*size = n * sizeof(ns1__generatePassword);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__generatePassword*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__generatePassword*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__generatePassword(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__generatePassword %p -> %p\n", q, p));
	*(ns1__generatePassword*)p = *(ns1__generatePassword*)q;
}

void ns1__generatePsamCardNoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__generatePsamCardNoResponse::return_);
	/* transient soap skipped */
}

void ns1__generatePsamCardNoResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__generatePsamCardNoResponse::return_);
	/* transient soap skipped */
#endif
}

int ns1__generatePsamCardNoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__generatePsamCardNoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__generatePsamCardNoResponse(struct soap *soap, const char *tag, int id, const ns1__generatePsamCardNoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__generatePsamCardNoResponse), type))
		return soap->error;
	if (soap_out_string(soap, "return", -1, &(a->ns1__generatePsamCardNoResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__generatePsamCardNoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__generatePsamCardNoResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__generatePsamCardNoResponse * SOAP_FMAC4 soap_in_ns1__generatePsamCardNoResponse(struct soap *soap, const char *tag, ns1__generatePsamCardNoResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__generatePsamCardNoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__generatePsamCardNoResponse, sizeof(ns1__generatePsamCardNoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__generatePsamCardNoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__generatePsamCardNoResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "return", &(a->ns1__generatePsamCardNoResponse::return_), "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__generatePsamCardNoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__generatePsamCardNoResponse, 0, sizeof(ns1__generatePsamCardNoResponse), 0, soap_copy_ns1__generatePsamCardNoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__generatePsamCardNoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__generatePsamCardNoResponse);
	if (this->soap_out(soap, tag?tag:"ns1:generatePsamCardNoResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__generatePsamCardNoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__generatePsamCardNoResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__generatePsamCardNoResponse * SOAP_FMAC4 soap_get_ns1__generatePsamCardNoResponse(struct soap *soap, ns1__generatePsamCardNoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__generatePsamCardNoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__generatePsamCardNoResponse * SOAP_FMAC2 soap_instantiate_ns1__generatePsamCardNoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__generatePsamCardNoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__generatePsamCardNoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__generatePsamCardNoResponse);
		if (size)
			*size = sizeof(ns1__generatePsamCardNoResponse);
		((ns1__generatePsamCardNoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__generatePsamCardNoResponse, n);
		if (size)
			*size = n * sizeof(ns1__generatePsamCardNoResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__generatePsamCardNoResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__generatePsamCardNoResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__generatePsamCardNoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__generatePsamCardNoResponse %p -> %p\n", q, p));
	*(ns1__generatePsamCardNoResponse*)p = *(ns1__generatePsamCardNoResponse*)q;
}

void ns1__generatePsamCardNo::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void ns1__generatePsamCardNo::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int ns1__generatePsamCardNo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__generatePsamCardNo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__generatePsamCardNo(struct soap *soap, const char *tag, int id, const ns1__generatePsamCardNo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__generatePsamCardNo), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__generatePsamCardNo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__generatePsamCardNo(soap, tag, this, type);
}

SOAP_FMAC3 ns1__generatePsamCardNo * SOAP_FMAC4 soap_in_ns1__generatePsamCardNo(struct soap *soap, const char *tag, ns1__generatePsamCardNo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__generatePsamCardNo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__generatePsamCardNo, sizeof(ns1__generatePsamCardNo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__generatePsamCardNo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__generatePsamCardNo *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__generatePsamCardNo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__generatePsamCardNo, 0, sizeof(ns1__generatePsamCardNo), 0, soap_copy_ns1__generatePsamCardNo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__generatePsamCardNo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__generatePsamCardNo);
	if (this->soap_out(soap, tag?tag:"ns1:generatePsamCardNo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__generatePsamCardNo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__generatePsamCardNo(soap, this, tag, type);
}

SOAP_FMAC3 ns1__generatePsamCardNo * SOAP_FMAC4 soap_get_ns1__generatePsamCardNo(struct soap *soap, ns1__generatePsamCardNo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__generatePsamCardNo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__generatePsamCardNo * SOAP_FMAC2 soap_instantiate_ns1__generatePsamCardNo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__generatePsamCardNo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__generatePsamCardNo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__generatePsamCardNo);
		if (size)
			*size = sizeof(ns1__generatePsamCardNo);
		((ns1__generatePsamCardNo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__generatePsamCardNo, n);
		if (size)
			*size = n * sizeof(ns1__generatePsamCardNo);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__generatePsamCardNo*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__generatePsamCardNo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__generatePsamCardNo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__generatePsamCardNo %p -> %p\n", q, p));
	*(ns1__generatePsamCardNo*)p = *(ns1__generatePsamCardNo*)q;
}

void ns1__storePsamCardResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__storePsamCardResponse::return_);
	/* transient soap skipped */
}

void ns1__storePsamCardResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__storePsamCardResponse::return_);
	/* transient soap skipped */
#endif
}

int ns1__storePsamCardResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__storePsamCardResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__storePsamCardResponse(struct soap *soap, const char *tag, int id, const ns1__storePsamCardResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__storePsamCardResponse), type))
		return soap->error;
	if (soap_out_string(soap, "return", -1, &(a->ns1__storePsamCardResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__storePsamCardResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__storePsamCardResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__storePsamCardResponse * SOAP_FMAC4 soap_in_ns1__storePsamCardResponse(struct soap *soap, const char *tag, ns1__storePsamCardResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__storePsamCardResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__storePsamCardResponse, sizeof(ns1__storePsamCardResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__storePsamCardResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__storePsamCardResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "return", &(a->ns1__storePsamCardResponse::return_), "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__storePsamCardResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__storePsamCardResponse, 0, sizeof(ns1__storePsamCardResponse), 0, soap_copy_ns1__storePsamCardResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__storePsamCardResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__storePsamCardResponse);
	if (this->soap_out(soap, tag?tag:"ns1:storePsamCardResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__storePsamCardResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__storePsamCardResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__storePsamCardResponse * SOAP_FMAC4 soap_get_ns1__storePsamCardResponse(struct soap *soap, ns1__storePsamCardResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__storePsamCardResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__storePsamCardResponse * SOAP_FMAC2 soap_instantiate_ns1__storePsamCardResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__storePsamCardResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__storePsamCardResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__storePsamCardResponse);
		if (size)
			*size = sizeof(ns1__storePsamCardResponse);
		((ns1__storePsamCardResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__storePsamCardResponse, n);
		if (size)
			*size = n * sizeof(ns1__storePsamCardResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__storePsamCardResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__storePsamCardResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__storePsamCardResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__storePsamCardResponse %p -> %p\n", q, p));
	*(ns1__storePsamCardResponse*)p = *(ns1__storePsamCardResponse*)q;
}

void ns1__storePsamCard::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__storePsamCard::arg0);
	/* transient soap skipped */
}

void ns1__storePsamCard::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__storePsamCard::arg0);
	/* transient soap skipped */
#endif
}

int ns1__storePsamCard::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__storePsamCard(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__storePsamCard(struct soap *soap, const char *tag, int id, const ns1__storePsamCard *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__storePsamCard), type))
		return soap->error;
	if (soap_out_string(soap, "arg0", -1, &(a->ns1__storePsamCard::arg0), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__storePsamCard::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__storePsamCard(soap, tag, this, type);
}

SOAP_FMAC3 ns1__storePsamCard * SOAP_FMAC4 soap_in_ns1__storePsamCard(struct soap *soap, const char *tag, ns1__storePsamCard *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__storePsamCard *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__storePsamCard, sizeof(ns1__storePsamCard), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__storePsamCard)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__storePsamCard *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_arg01 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "arg0", &(a->ns1__storePsamCard::arg0), "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__storePsamCard *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__storePsamCard, 0, sizeof(ns1__storePsamCard), 0, soap_copy_ns1__storePsamCard);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__storePsamCard::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__storePsamCard);
	if (this->soap_out(soap, tag?tag:"ns1:storePsamCard", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__storePsamCard::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__storePsamCard(soap, this, tag, type);
}

SOAP_FMAC3 ns1__storePsamCard * SOAP_FMAC4 soap_get_ns1__storePsamCard(struct soap *soap, ns1__storePsamCard *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__storePsamCard(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__storePsamCard * SOAP_FMAC2 soap_instantiate_ns1__storePsamCard(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__storePsamCard(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__storePsamCard, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__storePsamCard);
		if (size)
			*size = sizeof(ns1__storePsamCard);
		((ns1__storePsamCard*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__storePsamCard, n);
		if (size)
			*size = n * sizeof(ns1__storePsamCard);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__storePsamCard*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__storePsamCard*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__storePsamCard(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__storePsamCard %p -> %p\n", q, p));
	*(ns1__storePsamCard*)p = *(ns1__storePsamCard*)q;
}

void ns1__verifyUserResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__verifyUserResponse::return_);
	/* transient soap skipped */
}

void ns1__verifyUserResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__verifyUserResponse::return_);
	/* transient soap skipped */
#endif
}

int ns1__verifyUserResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__verifyUserResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__verifyUserResponse(struct soap *soap, const char *tag, int id, const ns1__verifyUserResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__verifyUserResponse), type))
		return soap->error;
	if (soap_out_string(soap, "return", -1, &(a->ns1__verifyUserResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__verifyUserResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__verifyUserResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__verifyUserResponse * SOAP_FMAC4 soap_in_ns1__verifyUserResponse(struct soap *soap, const char *tag, ns1__verifyUserResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__verifyUserResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__verifyUserResponse, sizeof(ns1__verifyUserResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__verifyUserResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__verifyUserResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "return", &(a->ns1__verifyUserResponse::return_), "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__verifyUserResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__verifyUserResponse, 0, sizeof(ns1__verifyUserResponse), 0, soap_copy_ns1__verifyUserResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__verifyUserResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__verifyUserResponse);
	if (this->soap_out(soap, tag?tag:"ns1:verifyUserResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__verifyUserResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__verifyUserResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__verifyUserResponse * SOAP_FMAC4 soap_get_ns1__verifyUserResponse(struct soap *soap, ns1__verifyUserResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__verifyUserResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__verifyUserResponse * SOAP_FMAC2 soap_instantiate_ns1__verifyUserResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__verifyUserResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__verifyUserResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__verifyUserResponse);
		if (size)
			*size = sizeof(ns1__verifyUserResponse);
		((ns1__verifyUserResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__verifyUserResponse, n);
		if (size)
			*size = n * sizeof(ns1__verifyUserResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__verifyUserResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__verifyUserResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__verifyUserResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__verifyUserResponse %p -> %p\n", q, p));
	*(ns1__verifyUserResponse*)p = *(ns1__verifyUserResponse*)q;
}

void ns1__verifyUser::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__verifyUser::arg0);
	/* transient soap skipped */
}

void ns1__verifyUser::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__verifyUser::arg0);
	/* transient soap skipped */
#endif
}

int ns1__verifyUser::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__verifyUser(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__verifyUser(struct soap *soap, const char *tag, int id, const ns1__verifyUser *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__verifyUser), type))
		return soap->error;
	if (soap_out_string(soap, "arg0", -1, &(a->ns1__verifyUser::arg0), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__verifyUser::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__verifyUser(soap, tag, this, type);
}

SOAP_FMAC3 ns1__verifyUser * SOAP_FMAC4 soap_in_ns1__verifyUser(struct soap *soap, const char *tag, ns1__verifyUser *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__verifyUser *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__verifyUser, sizeof(ns1__verifyUser), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__verifyUser)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__verifyUser *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_arg01 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "arg0", &(a->ns1__verifyUser::arg0), "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__verifyUser *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__verifyUser, 0, sizeof(ns1__verifyUser), 0, soap_copy_ns1__verifyUser);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__verifyUser::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__verifyUser);
	if (this->soap_out(soap, tag?tag:"ns1:verifyUser", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__verifyUser::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__verifyUser(soap, this, tag, type);
}

SOAP_FMAC3 ns1__verifyUser * SOAP_FMAC4 soap_get_ns1__verifyUser(struct soap *soap, ns1__verifyUser *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__verifyUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__verifyUser * SOAP_FMAC2 soap_instantiate_ns1__verifyUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__verifyUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__verifyUser, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__verifyUser);
		if (size)
			*size = sizeof(ns1__verifyUser);
		((ns1__verifyUser*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__verifyUser, n);
		if (size)
			*size = n * sizeof(ns1__verifyUser);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__verifyUser*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__verifyUser*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__verifyUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__verifyUser %p -> %p\n", q, p));
	*(ns1__verifyUser*)p = *(ns1__verifyUser*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getMainKey(struct soap *soap, struct __ns1__getMainKey *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getMainKey_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getMainKey(struct soap *soap, const struct __ns1__getMainKey *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__getMainKey(soap, &a->ns1__getMainKey_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getMainKey(struct soap *soap, const char *tag, int id, const struct __ns1__getMainKey *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons1__getMainKey(soap, "ns1:getMainKey", -1, &a->ns1__getMainKey_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getMainKey * SOAP_FMAC4 soap_in___ns1__getMainKey(struct soap *soap, const char *tag, struct __ns1__getMainKey *a, const char *type)
{
	size_t soap_flag_ns1__getMainKey_ = 1;
	short soap_flag;
	a = (struct __ns1__getMainKey *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getMainKey, sizeof(struct __ns1__getMainKey), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getMainKey(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getMainKey_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__getMainKey(soap, "ns1:getMainKey", &a->ns1__getMainKey_, "ns1:getMainKey"))
				{	soap_flag_ns1__getMainKey_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getMainKey(struct soap *soap, const struct __ns1__getMainKey *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__getMainKey(soap, tag?tag:"-ns1:getMainKey", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getMainKey * SOAP_FMAC4 soap_get___ns1__getMainKey(struct soap *soap, struct __ns1__getMainKey *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getMainKey(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__getMainKey * SOAP_FMAC2 soap_instantiate___ns1__getMainKey(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getMainKey(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__getMainKey, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__getMainKey);
		if (size)
			*size = sizeof(struct __ns1__getMainKey);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__getMainKey, n);
		if (size)
			*size = n * sizeof(struct __ns1__getMainKey);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__getMainKey*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getMainKey(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__getMainKey %p -> %p\n", q, p));
	*(struct __ns1__getMainKey*)p = *(struct __ns1__getMainKey*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getCardTypeRules(struct soap *soap, struct __ns1__getCardTypeRules *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getCardTypeRules_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getCardTypeRules(struct soap *soap, const struct __ns1__getCardTypeRules *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__getCardTypeRules(soap, &a->ns1__getCardTypeRules_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getCardTypeRules(struct soap *soap, const char *tag, int id, const struct __ns1__getCardTypeRules *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons1__getCardTypeRules(soap, "ns1:getCardTypeRules", -1, &a->ns1__getCardTypeRules_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getCardTypeRules * SOAP_FMAC4 soap_in___ns1__getCardTypeRules(struct soap *soap, const char *tag, struct __ns1__getCardTypeRules *a, const char *type)
{
	size_t soap_flag_ns1__getCardTypeRules_ = 1;
	short soap_flag;
	a = (struct __ns1__getCardTypeRules *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getCardTypeRules, sizeof(struct __ns1__getCardTypeRules), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getCardTypeRules(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getCardTypeRules_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__getCardTypeRules(soap, "ns1:getCardTypeRules", &a->ns1__getCardTypeRules_, "ns1:getCardTypeRules"))
				{	soap_flag_ns1__getCardTypeRules_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getCardTypeRules(struct soap *soap, const struct __ns1__getCardTypeRules *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__getCardTypeRules(soap, tag?tag:"-ns1:getCardTypeRules", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getCardTypeRules * SOAP_FMAC4 soap_get___ns1__getCardTypeRules(struct soap *soap, struct __ns1__getCardTypeRules *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getCardTypeRules(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__getCardTypeRules * SOAP_FMAC2 soap_instantiate___ns1__getCardTypeRules(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getCardTypeRules(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__getCardTypeRules, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__getCardTypeRules);
		if (size)
			*size = sizeof(struct __ns1__getCardTypeRules);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__getCardTypeRules, n);
		if (size)
			*size = n * sizeof(struct __ns1__getCardTypeRules);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__getCardTypeRules*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getCardTypeRules(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__getCardTypeRules %p -> %p\n", q, p));
	*(struct __ns1__getCardTypeRules*)p = *(struct __ns1__getCardTypeRules*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__storeCard(struct soap *soap, struct __ns1__storeCard *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__storeCard_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__storeCard(struct soap *soap, const struct __ns1__storeCard *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__storeCard(soap, &a->ns1__storeCard_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__storeCard(struct soap *soap, const char *tag, int id, const struct __ns1__storeCard *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons1__storeCard(soap, "ns1:storeCard", -1, &a->ns1__storeCard_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__storeCard * SOAP_FMAC4 soap_in___ns1__storeCard(struct soap *soap, const char *tag, struct __ns1__storeCard *a, const char *type)
{
	size_t soap_flag_ns1__storeCard_ = 1;
	short soap_flag;
	a = (struct __ns1__storeCard *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__storeCard, sizeof(struct __ns1__storeCard), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__storeCard(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__storeCard_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__storeCard(soap, "ns1:storeCard", &a->ns1__storeCard_, "ns1:storeCard"))
				{	soap_flag_ns1__storeCard_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__storeCard(struct soap *soap, const struct __ns1__storeCard *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__storeCard(soap, tag?tag:"-ns1:storeCard", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__storeCard * SOAP_FMAC4 soap_get___ns1__storeCard(struct soap *soap, struct __ns1__storeCard *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__storeCard(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__storeCard * SOAP_FMAC2 soap_instantiate___ns1__storeCard(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__storeCard(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__storeCard, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__storeCard);
		if (size)
			*size = sizeof(struct __ns1__storeCard);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__storeCard, n);
		if (size)
			*size = n * sizeof(struct __ns1__storeCard);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__storeCard*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__storeCard(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__storeCard %p -> %p\n", q, p));
	*(struct __ns1__storeCard*)p = *(struct __ns1__storeCard*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__generatePassword(struct soap *soap, struct __ns1__generatePassword *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__generatePassword_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__generatePassword(struct soap *soap, const struct __ns1__generatePassword *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__generatePassword(soap, &a->ns1__generatePassword_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__generatePassword(struct soap *soap, const char *tag, int id, const struct __ns1__generatePassword *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons1__generatePassword(soap, "ns1:generatePassword", -1, &a->ns1__generatePassword_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__generatePassword * SOAP_FMAC4 soap_in___ns1__generatePassword(struct soap *soap, const char *tag, struct __ns1__generatePassword *a, const char *type)
{
	size_t soap_flag_ns1__generatePassword_ = 1;
	short soap_flag;
	a = (struct __ns1__generatePassword *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__generatePassword, sizeof(struct __ns1__generatePassword), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__generatePassword(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__generatePassword_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__generatePassword(soap, "ns1:generatePassword", &a->ns1__generatePassword_, "ns1:generatePassword"))
				{	soap_flag_ns1__generatePassword_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__generatePassword(struct soap *soap, const struct __ns1__generatePassword *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__generatePassword(soap, tag?tag:"-ns1:generatePassword", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__generatePassword * SOAP_FMAC4 soap_get___ns1__generatePassword(struct soap *soap, struct __ns1__generatePassword *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__generatePassword(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__generatePassword * SOAP_FMAC2 soap_instantiate___ns1__generatePassword(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__generatePassword(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__generatePassword, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__generatePassword);
		if (size)
			*size = sizeof(struct __ns1__generatePassword);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__generatePassword, n);
		if (size)
			*size = n * sizeof(struct __ns1__generatePassword);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__generatePassword*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__generatePassword(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__generatePassword %p -> %p\n", q, p));
	*(struct __ns1__generatePassword*)p = *(struct __ns1__generatePassword*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__storePsamCard(struct soap *soap, struct __ns1__storePsamCard *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__storePsamCard_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__storePsamCard(struct soap *soap, const struct __ns1__storePsamCard *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__storePsamCard(soap, &a->ns1__storePsamCard_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__storePsamCard(struct soap *soap, const char *tag, int id, const struct __ns1__storePsamCard *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons1__storePsamCard(soap, "ns1:storePsamCard", -1, &a->ns1__storePsamCard_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__storePsamCard * SOAP_FMAC4 soap_in___ns1__storePsamCard(struct soap *soap, const char *tag, struct __ns1__storePsamCard *a, const char *type)
{
	size_t soap_flag_ns1__storePsamCard_ = 1;
	short soap_flag;
	a = (struct __ns1__storePsamCard *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__storePsamCard, sizeof(struct __ns1__storePsamCard), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__storePsamCard(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__storePsamCard_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__storePsamCard(soap, "ns1:storePsamCard", &a->ns1__storePsamCard_, "ns1:storePsamCard"))
				{	soap_flag_ns1__storePsamCard_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__storePsamCard(struct soap *soap, const struct __ns1__storePsamCard *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__storePsamCard(soap, tag?tag:"-ns1:storePsamCard", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__storePsamCard * SOAP_FMAC4 soap_get___ns1__storePsamCard(struct soap *soap, struct __ns1__storePsamCard *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__storePsamCard(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__storePsamCard * SOAP_FMAC2 soap_instantiate___ns1__storePsamCard(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__storePsamCard(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__storePsamCard, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__storePsamCard);
		if (size)
			*size = sizeof(struct __ns1__storePsamCard);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__storePsamCard, n);
		if (size)
			*size = n * sizeof(struct __ns1__storePsamCard);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__storePsamCard*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__storePsamCard(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__storePsamCard %p -> %p\n", q, p));
	*(struct __ns1__storePsamCard*)p = *(struct __ns1__storePsamCard*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__generatePsamCardNo(struct soap *soap, struct __ns1__generatePsamCardNo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__generatePsamCardNo_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__generatePsamCardNo(struct soap *soap, const struct __ns1__generatePsamCardNo *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__generatePsamCardNo(soap, &a->ns1__generatePsamCardNo_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__generatePsamCardNo(struct soap *soap, const char *tag, int id, const struct __ns1__generatePsamCardNo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons1__generatePsamCardNo(soap, "ns1:generatePsamCardNo", -1, &a->ns1__generatePsamCardNo_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__generatePsamCardNo * SOAP_FMAC4 soap_in___ns1__generatePsamCardNo(struct soap *soap, const char *tag, struct __ns1__generatePsamCardNo *a, const char *type)
{
	size_t soap_flag_ns1__generatePsamCardNo_ = 1;
	short soap_flag;
	a = (struct __ns1__generatePsamCardNo *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__generatePsamCardNo, sizeof(struct __ns1__generatePsamCardNo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__generatePsamCardNo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__generatePsamCardNo_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__generatePsamCardNo(soap, "ns1:generatePsamCardNo", &a->ns1__generatePsamCardNo_, "ns1:generatePsamCardNo"))
				{	soap_flag_ns1__generatePsamCardNo_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__generatePsamCardNo(struct soap *soap, const struct __ns1__generatePsamCardNo *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__generatePsamCardNo(soap, tag?tag:"-ns1:generatePsamCardNo", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__generatePsamCardNo * SOAP_FMAC4 soap_get___ns1__generatePsamCardNo(struct soap *soap, struct __ns1__generatePsamCardNo *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__generatePsamCardNo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__generatePsamCardNo * SOAP_FMAC2 soap_instantiate___ns1__generatePsamCardNo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__generatePsamCardNo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__generatePsamCardNo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__generatePsamCardNo);
		if (size)
			*size = sizeof(struct __ns1__generatePsamCardNo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__generatePsamCardNo, n);
		if (size)
			*size = n * sizeof(struct __ns1__generatePsamCardNo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__generatePsamCardNo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__generatePsamCardNo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__generatePsamCardNo %p -> %p\n", q, p));
	*(struct __ns1__generatePsamCardNo*)p = *(struct __ns1__generatePsamCardNo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__verifyUser(struct soap *soap, struct __ns1__verifyUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__verifyUser_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__verifyUser(struct soap *soap, const struct __ns1__verifyUser *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__verifyUser(soap, &a->ns1__verifyUser_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__verifyUser(struct soap *soap, const char *tag, int id, const struct __ns1__verifyUser *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons1__verifyUser(soap, "ns1:verifyUser", -1, &a->ns1__verifyUser_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__verifyUser * SOAP_FMAC4 soap_in___ns1__verifyUser(struct soap *soap, const char *tag, struct __ns1__verifyUser *a, const char *type)
{
	size_t soap_flag_ns1__verifyUser_ = 1;
	short soap_flag;
	a = (struct __ns1__verifyUser *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__verifyUser, sizeof(struct __ns1__verifyUser), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__verifyUser(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__verifyUser_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__verifyUser(soap, "ns1:verifyUser", &a->ns1__verifyUser_, "ns1:verifyUser"))
				{	soap_flag_ns1__verifyUser_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__verifyUser(struct soap *soap, const struct __ns1__verifyUser *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__verifyUser(soap, tag?tag:"-ns1:verifyUser", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__verifyUser * SOAP_FMAC4 soap_get___ns1__verifyUser(struct soap *soap, struct __ns1__verifyUser *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__verifyUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__verifyUser * SOAP_FMAC2 soap_instantiate___ns1__verifyUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__verifyUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__verifyUser, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__verifyUser);
		if (size)
			*size = sizeof(struct __ns1__verifyUser);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__verifyUser, n);
		if (size)
			*size = n * sizeof(struct __ns1__verifyUser);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__verifyUser*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__verifyUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__verifyUser %p -> %p\n", q, p));
	*(struct __ns1__verifyUser*)p = *(struct __ns1__verifyUser*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getMainKeyResponse(struct soap *soap, ns1__getMainKeyResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__getMainKeyResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getMainKeyResponse(struct soap *soap, const char *tag, int id, ns1__getMainKeyResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__getMainKeyResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__getMainKeyResponse ** SOAP_FMAC4 soap_in_PointerTons1__getMainKeyResponse(struct soap *soap, const char *tag, ns1__getMainKeyResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__getMainKeyResponse **)soap_malloc(soap, sizeof(ns1__getMainKeyResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__getMainKeyResponse *)soap_instantiate_ns1__getMainKeyResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__getMainKeyResponse ** p = (ns1__getMainKeyResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__getMainKeyResponse, sizeof(ns1__getMainKeyResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getMainKeyResponse(struct soap *soap, ns1__getMainKeyResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__getMainKeyResponse);
	if (soap_out_PointerTons1__getMainKeyResponse(soap, tag?tag:"ns1:getMainKeyResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__getMainKeyResponse ** SOAP_FMAC4 soap_get_PointerTons1__getMainKeyResponse(struct soap *soap, ns1__getMainKeyResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__getMainKeyResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getMainKey(struct soap *soap, ns1__getMainKey *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__getMainKey))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getMainKey(struct soap *soap, const char *tag, int id, ns1__getMainKey *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__getMainKey);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__getMainKey ** SOAP_FMAC4 soap_in_PointerTons1__getMainKey(struct soap *soap, const char *tag, ns1__getMainKey **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__getMainKey **)soap_malloc(soap, sizeof(ns1__getMainKey *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__getMainKey *)soap_instantiate_ns1__getMainKey(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__getMainKey ** p = (ns1__getMainKey **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__getMainKey, sizeof(ns1__getMainKey), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getMainKey(struct soap *soap, ns1__getMainKey *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__getMainKey);
	if (soap_out_PointerTons1__getMainKey(soap, tag?tag:"ns1:getMainKey", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__getMainKey ** SOAP_FMAC4 soap_get_PointerTons1__getMainKey(struct soap *soap, ns1__getMainKey **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__getMainKey(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getCardTypeRulesResponse(struct soap *soap, ns1__getCardTypeRulesResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__getCardTypeRulesResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getCardTypeRulesResponse(struct soap *soap, const char *tag, int id, ns1__getCardTypeRulesResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__getCardTypeRulesResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__getCardTypeRulesResponse ** SOAP_FMAC4 soap_in_PointerTons1__getCardTypeRulesResponse(struct soap *soap, const char *tag, ns1__getCardTypeRulesResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__getCardTypeRulesResponse **)soap_malloc(soap, sizeof(ns1__getCardTypeRulesResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__getCardTypeRulesResponse *)soap_instantiate_ns1__getCardTypeRulesResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__getCardTypeRulesResponse ** p = (ns1__getCardTypeRulesResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__getCardTypeRulesResponse, sizeof(ns1__getCardTypeRulesResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getCardTypeRulesResponse(struct soap *soap, ns1__getCardTypeRulesResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__getCardTypeRulesResponse);
	if (soap_out_PointerTons1__getCardTypeRulesResponse(soap, tag?tag:"ns1:getCardTypeRulesResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__getCardTypeRulesResponse ** SOAP_FMAC4 soap_get_PointerTons1__getCardTypeRulesResponse(struct soap *soap, ns1__getCardTypeRulesResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__getCardTypeRulesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getCardTypeRules(struct soap *soap, ns1__getCardTypeRules *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__getCardTypeRules))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getCardTypeRules(struct soap *soap, const char *tag, int id, ns1__getCardTypeRules *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__getCardTypeRules);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__getCardTypeRules ** SOAP_FMAC4 soap_in_PointerTons1__getCardTypeRules(struct soap *soap, const char *tag, ns1__getCardTypeRules **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__getCardTypeRules **)soap_malloc(soap, sizeof(ns1__getCardTypeRules *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__getCardTypeRules *)soap_instantiate_ns1__getCardTypeRules(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__getCardTypeRules ** p = (ns1__getCardTypeRules **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__getCardTypeRules, sizeof(ns1__getCardTypeRules), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getCardTypeRules(struct soap *soap, ns1__getCardTypeRules *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__getCardTypeRules);
	if (soap_out_PointerTons1__getCardTypeRules(soap, tag?tag:"ns1:getCardTypeRules", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__getCardTypeRules ** SOAP_FMAC4 soap_get_PointerTons1__getCardTypeRules(struct soap *soap, ns1__getCardTypeRules **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__getCardTypeRules(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__storeCardResponse(struct soap *soap, ns1__storeCardResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__storeCardResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__storeCardResponse(struct soap *soap, const char *tag, int id, ns1__storeCardResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__storeCardResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__storeCardResponse ** SOAP_FMAC4 soap_in_PointerTons1__storeCardResponse(struct soap *soap, const char *tag, ns1__storeCardResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__storeCardResponse **)soap_malloc(soap, sizeof(ns1__storeCardResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__storeCardResponse *)soap_instantiate_ns1__storeCardResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__storeCardResponse ** p = (ns1__storeCardResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__storeCardResponse, sizeof(ns1__storeCardResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__storeCardResponse(struct soap *soap, ns1__storeCardResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__storeCardResponse);
	if (soap_out_PointerTons1__storeCardResponse(soap, tag?tag:"ns1:storeCardResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__storeCardResponse ** SOAP_FMAC4 soap_get_PointerTons1__storeCardResponse(struct soap *soap, ns1__storeCardResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__storeCardResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__storeCard(struct soap *soap, ns1__storeCard *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__storeCard))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__storeCard(struct soap *soap, const char *tag, int id, ns1__storeCard *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__storeCard);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__storeCard ** SOAP_FMAC4 soap_in_PointerTons1__storeCard(struct soap *soap, const char *tag, ns1__storeCard **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__storeCard **)soap_malloc(soap, sizeof(ns1__storeCard *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__storeCard *)soap_instantiate_ns1__storeCard(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__storeCard ** p = (ns1__storeCard **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__storeCard, sizeof(ns1__storeCard), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__storeCard(struct soap *soap, ns1__storeCard *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__storeCard);
	if (soap_out_PointerTons1__storeCard(soap, tag?tag:"ns1:storeCard", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__storeCard ** SOAP_FMAC4 soap_get_PointerTons1__storeCard(struct soap *soap, ns1__storeCard **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__storeCard(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__generatePasswordResponse(struct soap *soap, ns1__generatePasswordResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__generatePasswordResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__generatePasswordResponse(struct soap *soap, const char *tag, int id, ns1__generatePasswordResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__generatePasswordResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__generatePasswordResponse ** SOAP_FMAC4 soap_in_PointerTons1__generatePasswordResponse(struct soap *soap, const char *tag, ns1__generatePasswordResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__generatePasswordResponse **)soap_malloc(soap, sizeof(ns1__generatePasswordResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__generatePasswordResponse *)soap_instantiate_ns1__generatePasswordResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__generatePasswordResponse ** p = (ns1__generatePasswordResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__generatePasswordResponse, sizeof(ns1__generatePasswordResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__generatePasswordResponse(struct soap *soap, ns1__generatePasswordResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__generatePasswordResponse);
	if (soap_out_PointerTons1__generatePasswordResponse(soap, tag?tag:"ns1:generatePasswordResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__generatePasswordResponse ** SOAP_FMAC4 soap_get_PointerTons1__generatePasswordResponse(struct soap *soap, ns1__generatePasswordResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__generatePasswordResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__generatePassword(struct soap *soap, ns1__generatePassword *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__generatePassword))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__generatePassword(struct soap *soap, const char *tag, int id, ns1__generatePassword *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__generatePassword);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__generatePassword ** SOAP_FMAC4 soap_in_PointerTons1__generatePassword(struct soap *soap, const char *tag, ns1__generatePassword **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__generatePassword **)soap_malloc(soap, sizeof(ns1__generatePassword *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__generatePassword *)soap_instantiate_ns1__generatePassword(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__generatePassword ** p = (ns1__generatePassword **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__generatePassword, sizeof(ns1__generatePassword), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__generatePassword(struct soap *soap, ns1__generatePassword *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__generatePassword);
	if (soap_out_PointerTons1__generatePassword(soap, tag?tag:"ns1:generatePassword", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__generatePassword ** SOAP_FMAC4 soap_get_PointerTons1__generatePassword(struct soap *soap, ns1__generatePassword **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__generatePassword(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__storePsamCardResponse(struct soap *soap, ns1__storePsamCardResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__storePsamCardResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__storePsamCardResponse(struct soap *soap, const char *tag, int id, ns1__storePsamCardResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__storePsamCardResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__storePsamCardResponse ** SOAP_FMAC4 soap_in_PointerTons1__storePsamCardResponse(struct soap *soap, const char *tag, ns1__storePsamCardResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__storePsamCardResponse **)soap_malloc(soap, sizeof(ns1__storePsamCardResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__storePsamCardResponse *)soap_instantiate_ns1__storePsamCardResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__storePsamCardResponse ** p = (ns1__storePsamCardResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__storePsamCardResponse, sizeof(ns1__storePsamCardResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__storePsamCardResponse(struct soap *soap, ns1__storePsamCardResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__storePsamCardResponse);
	if (soap_out_PointerTons1__storePsamCardResponse(soap, tag?tag:"ns1:storePsamCardResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__storePsamCardResponse ** SOAP_FMAC4 soap_get_PointerTons1__storePsamCardResponse(struct soap *soap, ns1__storePsamCardResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__storePsamCardResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__storePsamCard(struct soap *soap, ns1__storePsamCard *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__storePsamCard))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__storePsamCard(struct soap *soap, const char *tag, int id, ns1__storePsamCard *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__storePsamCard);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__storePsamCard ** SOAP_FMAC4 soap_in_PointerTons1__storePsamCard(struct soap *soap, const char *tag, ns1__storePsamCard **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__storePsamCard **)soap_malloc(soap, sizeof(ns1__storePsamCard *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__storePsamCard *)soap_instantiate_ns1__storePsamCard(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__storePsamCard ** p = (ns1__storePsamCard **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__storePsamCard, sizeof(ns1__storePsamCard), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__storePsamCard(struct soap *soap, ns1__storePsamCard *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__storePsamCard);
	if (soap_out_PointerTons1__storePsamCard(soap, tag?tag:"ns1:storePsamCard", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__storePsamCard ** SOAP_FMAC4 soap_get_PointerTons1__storePsamCard(struct soap *soap, ns1__storePsamCard **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__storePsamCard(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__generatePsamCardNoResponse(struct soap *soap, ns1__generatePsamCardNoResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__generatePsamCardNoResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__generatePsamCardNoResponse(struct soap *soap, const char *tag, int id, ns1__generatePsamCardNoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__generatePsamCardNoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__generatePsamCardNoResponse ** SOAP_FMAC4 soap_in_PointerTons1__generatePsamCardNoResponse(struct soap *soap, const char *tag, ns1__generatePsamCardNoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__generatePsamCardNoResponse **)soap_malloc(soap, sizeof(ns1__generatePsamCardNoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__generatePsamCardNoResponse *)soap_instantiate_ns1__generatePsamCardNoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__generatePsamCardNoResponse ** p = (ns1__generatePsamCardNoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__generatePsamCardNoResponse, sizeof(ns1__generatePsamCardNoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__generatePsamCardNoResponse(struct soap *soap, ns1__generatePsamCardNoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__generatePsamCardNoResponse);
	if (soap_out_PointerTons1__generatePsamCardNoResponse(soap, tag?tag:"ns1:generatePsamCardNoResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__generatePsamCardNoResponse ** SOAP_FMAC4 soap_get_PointerTons1__generatePsamCardNoResponse(struct soap *soap, ns1__generatePsamCardNoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__generatePsamCardNoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__generatePsamCardNo(struct soap *soap, ns1__generatePsamCardNo *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__generatePsamCardNo))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__generatePsamCardNo(struct soap *soap, const char *tag, int id, ns1__generatePsamCardNo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__generatePsamCardNo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__generatePsamCardNo ** SOAP_FMAC4 soap_in_PointerTons1__generatePsamCardNo(struct soap *soap, const char *tag, ns1__generatePsamCardNo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__generatePsamCardNo **)soap_malloc(soap, sizeof(ns1__generatePsamCardNo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__generatePsamCardNo *)soap_instantiate_ns1__generatePsamCardNo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__generatePsamCardNo ** p = (ns1__generatePsamCardNo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__generatePsamCardNo, sizeof(ns1__generatePsamCardNo), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__generatePsamCardNo(struct soap *soap, ns1__generatePsamCardNo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__generatePsamCardNo);
	if (soap_out_PointerTons1__generatePsamCardNo(soap, tag?tag:"ns1:generatePsamCardNo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__generatePsamCardNo ** SOAP_FMAC4 soap_get_PointerTons1__generatePsamCardNo(struct soap *soap, ns1__generatePsamCardNo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__generatePsamCardNo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__verifyUserResponse(struct soap *soap, ns1__verifyUserResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__verifyUserResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__verifyUserResponse(struct soap *soap, const char *tag, int id, ns1__verifyUserResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__verifyUserResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__verifyUserResponse ** SOAP_FMAC4 soap_in_PointerTons1__verifyUserResponse(struct soap *soap, const char *tag, ns1__verifyUserResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__verifyUserResponse **)soap_malloc(soap, sizeof(ns1__verifyUserResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__verifyUserResponse *)soap_instantiate_ns1__verifyUserResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__verifyUserResponse ** p = (ns1__verifyUserResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__verifyUserResponse, sizeof(ns1__verifyUserResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__verifyUserResponse(struct soap *soap, ns1__verifyUserResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__verifyUserResponse);
	if (soap_out_PointerTons1__verifyUserResponse(soap, tag?tag:"ns1:verifyUserResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__verifyUserResponse ** SOAP_FMAC4 soap_get_PointerTons1__verifyUserResponse(struct soap *soap, ns1__verifyUserResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__verifyUserResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__verifyUser(struct soap *soap, ns1__verifyUser *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__verifyUser))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__verifyUser(struct soap *soap, const char *tag, int id, ns1__verifyUser *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__verifyUser);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__verifyUser ** SOAP_FMAC4 soap_in_PointerTons1__verifyUser(struct soap *soap, const char *tag, ns1__verifyUser **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__verifyUser **)soap_malloc(soap, sizeof(ns1__verifyUser *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__verifyUser *)soap_instantiate_ns1__verifyUser(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__verifyUser ** p = (ns1__verifyUser **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__verifyUser, sizeof(ns1__verifyUser), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__verifyUser(struct soap *soap, ns1__verifyUser *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__verifyUser);
	if (soap_out_PointerTons1__verifyUser(soap, tag?tag:"ns1:verifyUser", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__verifyUser ** SOAP_FMAC4 soap_get_PointerTons1__verifyUser(struct soap *soap, ns1__verifyUser **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__verifyUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
