/* soapStub.h
   Generated by gSOAP 2.8.15 from wpsoap.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#define SOAP_NAMESPACE_OF_ns1	"http://service.ws.redcard.com/"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20815
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns1__verifyUser
#define SOAP_TYPE_ns1__verifyUser (7)
/* ns1:verifyUser */
class SOAP_CMAC ns1__verifyUser
{
public:
	char *arg0;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 7; } /* = unique id SOAP_TYPE_ns1__verifyUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__verifyUser() { ns1__verifyUser::soap_default(NULL); }
	virtual ~ns1__verifyUser() { }
};
#endif

#ifndef SOAP_TYPE_ns1__verifyUserResponse
#define SOAP_TYPE_ns1__verifyUserResponse (8)
/* ns1:verifyUserResponse */
class SOAP_CMAC ns1__verifyUserResponse
{
public:
	char *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_ns1__verifyUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__verifyUserResponse() { ns1__verifyUserResponse::soap_default(NULL); }
	virtual ~ns1__verifyUserResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__storePsamCard
#define SOAP_TYPE_ns1__storePsamCard (9)
/* ns1:storePsamCard */
class SOAP_CMAC ns1__storePsamCard
{
public:
	char *arg0;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_ns1__storePsamCard */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__storePsamCard() { ns1__storePsamCard::soap_default(NULL); }
	virtual ~ns1__storePsamCard() { }
};
#endif

#ifndef SOAP_TYPE_ns1__storePsamCardResponse
#define SOAP_TYPE_ns1__storePsamCardResponse (10)
/* ns1:storePsamCardResponse */
class SOAP_CMAC ns1__storePsamCardResponse
{
public:
	char *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_ns1__storePsamCardResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__storePsamCardResponse() { ns1__storePsamCardResponse::soap_default(NULL); }
	virtual ~ns1__storePsamCardResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__generatePsamCardNo
#define SOAP_TYPE_ns1__generatePsamCardNo (11)
/* ns1:generatePsamCardNo */
class SOAP_CMAC ns1__generatePsamCardNo
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_ns1__generatePsamCardNo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__generatePsamCardNo() { ns1__generatePsamCardNo::soap_default(NULL); }
	virtual ~ns1__generatePsamCardNo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__generatePsamCardNoResponse
#define SOAP_TYPE_ns1__generatePsamCardNoResponse (12)
/* ns1:generatePsamCardNoResponse */
class SOAP_CMAC ns1__generatePsamCardNoResponse
{
public:
	char *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_ns1__generatePsamCardNoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__generatePsamCardNoResponse() { ns1__generatePsamCardNoResponse::soap_default(NULL); }
	virtual ~ns1__generatePsamCardNoResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__generatePassword
#define SOAP_TYPE_ns1__generatePassword (13)
/* ns1:generatePassword */
class SOAP_CMAC ns1__generatePassword
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_ns1__generatePassword */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__generatePassword() { ns1__generatePassword::soap_default(NULL); }
	virtual ~ns1__generatePassword() { }
};
#endif

#ifndef SOAP_TYPE_ns1__generatePasswordResponse
#define SOAP_TYPE_ns1__generatePasswordResponse (14)
/* ns1:generatePasswordResponse */
class SOAP_CMAC ns1__generatePasswordResponse
{
public:
	char *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_ns1__generatePasswordResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__generatePasswordResponse() { ns1__generatePasswordResponse::soap_default(NULL); }
	virtual ~ns1__generatePasswordResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__storeCard
#define SOAP_TYPE_ns1__storeCard (15)
/* ns1:storeCard */
class SOAP_CMAC ns1__storeCard
{
public:
	char *arg0;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_ns1__storeCard */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__storeCard() { ns1__storeCard::soap_default(NULL); }
	virtual ~ns1__storeCard() { }
};
#endif

#ifndef SOAP_TYPE_ns1__storeCardResponse
#define SOAP_TYPE_ns1__storeCardResponse (16)
/* ns1:storeCardResponse */
class SOAP_CMAC ns1__storeCardResponse
{
public:
	char *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_ns1__storeCardResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__storeCardResponse() { ns1__storeCardResponse::soap_default(NULL); }
	virtual ~ns1__storeCardResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__getCardTypeRules
#define SOAP_TYPE_ns1__getCardTypeRules (17)
/* ns1:getCardTypeRules */
class SOAP_CMAC ns1__getCardTypeRules
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_ns1__getCardTypeRules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__getCardTypeRules() { ns1__getCardTypeRules::soap_default(NULL); }
	virtual ~ns1__getCardTypeRules() { }
};
#endif

#ifndef SOAP_TYPE_ns1__getCardTypeRulesResponse
#define SOAP_TYPE_ns1__getCardTypeRulesResponse (18)
/* ns1:getCardTypeRulesResponse */
class SOAP_CMAC ns1__getCardTypeRulesResponse
{
public:
	char *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_ns1__getCardTypeRulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__getCardTypeRulesResponse() { ns1__getCardTypeRulesResponse::soap_default(NULL); }
	virtual ~ns1__getCardTypeRulesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__getMainKey
#define SOAP_TYPE_ns1__getMainKey (19)
/* ns1:getMainKey */
class SOAP_CMAC ns1__getMainKey
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_ns1__getMainKey */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__getMainKey() { ns1__getMainKey::soap_default(NULL); }
	virtual ~ns1__getMainKey() { }
};
#endif

#ifndef SOAP_TYPE_ns1__getMainKeyResponse
#define SOAP_TYPE_ns1__getMainKeyResponse (20)
/* ns1:getMainKeyResponse */
class SOAP_CMAC ns1__getMainKeyResponse
{
public:
	char *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_ns1__getMainKeyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__getMainKeyResponse() { ns1__getMainKeyResponse::soap_default(NULL); }
	virtual ~ns1__getMainKeyResponse() { }
};
#endif

#ifndef SOAP_TYPE___ns1__verifyUser
#define SOAP_TYPE___ns1__verifyUser (25)
/* Operation wrapper: */
struct __ns1__verifyUser
{
public:
	ns1__verifyUser *ns1__verifyUser_;	/* optional element of type ns1:verifyUser */
public:
	int soap_type() const { return 25; } /* = unique id SOAP_TYPE___ns1__verifyUser */
};
#endif

#ifndef SOAP_TYPE___ns1__generatePsamCardNo
#define SOAP_TYPE___ns1__generatePsamCardNo (29)
/* Operation wrapper: */
struct __ns1__generatePsamCardNo
{
public:
	ns1__generatePsamCardNo *ns1__generatePsamCardNo_;	/* optional element of type ns1:generatePsamCardNo */
public:
	int soap_type() const { return 29; } /* = unique id SOAP_TYPE___ns1__generatePsamCardNo */
};
#endif

#ifndef SOAP_TYPE___ns1__storePsamCard
#define SOAP_TYPE___ns1__storePsamCard (33)
/* Operation wrapper: */
struct __ns1__storePsamCard
{
public:
	ns1__storePsamCard *ns1__storePsamCard_;	/* optional element of type ns1:storePsamCard */
public:
	int soap_type() const { return 33; } /* = unique id SOAP_TYPE___ns1__storePsamCard */
};
#endif

#ifndef SOAP_TYPE___ns1__generatePassword
#define SOAP_TYPE___ns1__generatePassword (37)
/* Operation wrapper: */
struct __ns1__generatePassword
{
public:
	ns1__generatePassword *ns1__generatePassword_;	/* optional element of type ns1:generatePassword */
public:
	int soap_type() const { return 37; } /* = unique id SOAP_TYPE___ns1__generatePassword */
};
#endif

#ifndef SOAP_TYPE___ns1__storeCard
#define SOAP_TYPE___ns1__storeCard (41)
/* Operation wrapper: */
struct __ns1__storeCard
{
public:
	ns1__storeCard *ns1__storeCard_;	/* optional element of type ns1:storeCard */
public:
	int soap_type() const { return 41; } /* = unique id SOAP_TYPE___ns1__storeCard */
};
#endif

#ifndef SOAP_TYPE___ns1__getCardTypeRules
#define SOAP_TYPE___ns1__getCardTypeRules (45)
/* Operation wrapper: */
struct __ns1__getCardTypeRules
{
public:
	ns1__getCardTypeRules *ns1__getCardTypeRules_;	/* optional element of type ns1:getCardTypeRules */
public:
	int soap_type() const { return 45; } /* = unique id SOAP_TYPE___ns1__getCardTypeRules */
};
#endif

#ifndef SOAP_TYPE___ns1__getMainKey
#define SOAP_TYPE___ns1__getMainKey (49)
/* Operation wrapper: */
struct __ns1__getMainKey
{
public:
	ns1__getMainKey *ns1__getMainKey_;	/* optional element of type ns1:getMainKey */
public:
	int soap_type() const { return 49; } /* = unique id SOAP_TYPE___ns1__getMainKey */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (50)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 50; } /* = unique id SOAP_TYPE_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (51)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 51; } /* = unique id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (53)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 53; } /* = unique id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (56)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 56; } /* = unique id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (57)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 57; } /* = unique id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
